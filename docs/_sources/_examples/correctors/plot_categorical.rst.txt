
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/correctors/plot_categorical.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_correctors_plot_categorical.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_correctors_plot_categorical.py:


Ensure categories (category)
============================

.. GENERATED FROM PYTHON SOURCE LINES 5-62




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Note: The categorical_corrector is still being developed. In
    particular it does not raise errors and it assumes that
    allow_combinations=True (ignore correction 4).

            0       1
    0    None    <NA>
    1    <NA>    <NA>
    2  DENV-1  DENV-1
    3  DENV-2  DENV-2
    4  DENV-8    <NA>

                    0              1
    0       None,None           <NA>
    1       None,<NA>           <NA>
    2     None,DENV-1         DENV-1
    3     None,DENV-2         DENV-2
    4     None,DENV-8           <NA>
    5       <NA>,None           <NA>
    6       <NA>,<NA>           <NA>
    7     <NA>,DENV-1         DENV-1
    8     <NA>,DENV-2         DENV-2
    9     <NA>,DENV-8           <NA>
    10    DENV-1,None         DENV-1
    11    DENV-1,<NA>         DENV-1
    12  DENV-1,DENV-1         DENV-1
    13  DENV-1,DENV-2  DENV-1,DENV-2
    14  DENV-1,DENV-8         DENV-1
    15    DENV-2,None         DENV-2
    16    DENV-2,<NA>         DENV-2
    17  DENV-2,DENV-1  DENV-1,DENV-2
    18  DENV-2,DENV-2         DENV-2
    19  DENV-2,DENV-8         DENV-2
    20    DENV-8,None           <NA>
    21    DENV-8,<NA>           <NA>
    22  DENV-8,DENV-1         DENV-1
    23  DENV-8,DENV-2         DENV-2
    24  DENV-8,DENV-8           <NA>

                    0              1
    0            None           <NA>
    1            <NA>           <NA>
    2          DENV-1         DENV-1
    3          DENV-2         DENV-2
    4          DENV-8           <NA>
    0       None,None           <NA>
    1       None,<NA>           <NA>
    2     None,DENV-1         DENV-1
    3     None,DENV-2         DENV-2
    4     None,DENV-8           <NA>
    5       <NA>,None           <NA>
    6       <NA>,<NA>           <NA>
    7     <NA>,DENV-1         DENV-1
    8     <NA>,DENV-2         DENV-2
    9     <NA>,DENV-8           <NA>
    10    DENV-1,None         DENV-1
    11    DENV-1,<NA>         DENV-1
    12  DENV-1,DENV-1         DENV-1
    13  DENV-1,DENV-2  DENV-1,DENV-2
    14  DENV-1,DENV-8         DENV-1
    15    DENV-2,None         DENV-2
    16    DENV-2,<NA>         DENV-2
    17  DENV-2,DENV-1  DENV-1,DENV-2
    18  DENV-2,DENV-2         DENV-2
    19  DENV-2,DENV-8         DENV-2
    20    DENV-8,None           <NA>
    21    DENV-8,<NA>           <NA>
    22  DENV-8,DENV-1         DENV-1
    23  DENV-8,DENV-2         DENV-2
    24  DENV-8,DENV-8           <NA>






|

.. code-block:: default
   :lineno-start: 5

    # Import
    import numpy as np
    import pandas as pd

    # Specific
    from itertools import product
    from itertools import combinations

    # DataBlend library
    from datablend.core.repair.correctors import categorical_correction

    # -----------------------------
    # Main
    # -----------------------------
    # Define categories
    categories = ['DENV-1', 'DENV-2']

    # -----------------------------
    # pcr_dengue
    # -----------------------------
    # Possible values
    pcr_dengue_serotype = [None,
                           pd.NA,
                           'DENV-1',
                           'DENV-2',
                           'DENV-8']

    # Product
    matrix = product(pcr_dengue_serotype,
                     pcr_dengue_serotype)

    # Combine as strings
    matrix = [','.join(map(str, tup)) for tup in matrix]

    # Data
    data1 = pd.Series(pcr_dengue_serotype)
    data2 = pd.Series(matrix)
    data3 = data1.append(data2)

    # Corrections
    correction1 = categorical_correction(data1,
        categories=categories, errors='coerce')

    correction2 = categorical_correction(data2,
        categories=categories, errors='coerce',
        allow_combinations=True)

    correction3 = categorical_correction(data3,
        categories=categories, errors='coerce',
        allow_combinations=True)

    # Show
    print("\nNote: The categorical_corrector is still being developed. In\n"
          "particular it does not raise errors and it assumes that\n"
          "allow_combinations=True (ignore correction 4).")
    print("\n%s" % pd.concat([data1, correction1], axis=1))
    print("\n%s" % pd.concat([data2, correction2], axis=1))
    print("\n%s" % pd.concat([data3, correction3], axis=1))

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.037 seconds)


.. _sphx_glr_download__examples_correctors_plot_categorical.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_categorical.py <plot_categorical.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_categorical.ipynb <plot_categorical.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
